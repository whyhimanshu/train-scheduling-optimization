"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Brain, Zap, Target, Clock, AlertTriangle, CheckCircle, Play, Pause, Settings } from "lucide-react"
import { useState } from "react"

const initialScenarios = [
  {
    id: 1,
    name: "Peak Hour Optimization",
    description: "Optimize train movements during 8-10 AM rush hour",
    status: "running",
    progress: 67,
    estimatedCompletion: "2 min",
    improvements: { throughput: "+15%", delays: "-23%", utilization: "+8%" },
  },
  {
    id: 2,
    name: "Platform Conflict Resolution",
    description: "Resolve platform allocation conflicts for incoming trains",
    status: "completed",
    progress: 100,
    estimatedCompletion: "Completed",
    improvements: { throughput: "+12%", delays: "-18%", utilization: "+5%" },
  },
  {
    id: 3,
    name: "Freight Integration",
    description: "Optimize freight train routing with passenger services",
    status: "queued",
    progress: 0,
    estimatedCompletion: "5 min",
    improvements: { throughput: "+8%", delays: "-12%", utilization: "+3%" },
  },
]

const constraints = [
  { name: "Safety Protocols", status: "active", priority: "critical" },
  { name: "Signal System", status: "active", priority: "critical" },
  { name: "Platform Capacity", status: "active", priority: "high" },
  { name: "Track Maintenance", status: "active", priority: "medium" },
  { name: "Weather Conditions", status: "monitoring", priority: "low" },
  { name: "Rolling Stock Availability", status: "active", priority: "high" },
]

const algorithmMetrics = [
  { name: "Processing Speed", value: "2.3ms", status: "optimal" },
  { name: "Solution Quality", value: "94%", status: "excellent" },
  { name: "Constraint Satisfaction", value: "100%", status: "perfect" },
  { name: "Prediction Accuracy", value: "91%", status: "good" },
]

export function OptimizationEngine() {
  const [scenarios, setScenarios] = useState(initialScenarios)
  const [creating, setCreating] = useState(false)

  async function createScenario() {
    try {
      setCreating(true)
      const res = await fetch("/api/ai/optimize", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          mode: "scenario",
          context: {
            hint: "Propose a useful new optimization scenario for the next 30 minutes. Return JSON with name and description.",
          },
        }),
      })
      const data = await res.json()
      const nextId = scenarios.length ? Math.max(...scenarios.map((s) => s.id)) + 1 : 1
      const newScenario =
        data?.scenario && data.scenario.name
          ? {
              id: nextId,
              name: data.scenario.name,
              description: data.scenario.description || "Generated by AI",
              status: "queued",
              progress: 0,
              estimatedCompletion: "5 min",
              improvements: { throughput: "+0%", delays: "-0%", utilization: "+0%" },
            }
          : {
              id: nextId,
              name: "AI Proposed Scenario",
              description: (data?.text as string) || "Generated by AI",
              status: "queued",
              progress: 0,
              estimatedCompletion: "5 min",
              improvements: { throughput: "+0%", delays: "-0%", utilization: "+0%" },
            }
      setScenarios((prev) => [newScenario, ...prev])
    } finally {
      setCreating(false)
    }
  }

  return (
    <div className="space-y-6">
      <Card className="bg-card border-border">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center">
                <Brain className="h-5 w-5 text-primary" />
              </div>
              <div>
                <CardTitle className="text-card-foreground">AI Optimization Engine</CardTitle>
                <p className="text-sm text-muted-foreground">Advanced algorithms for traffic optimization</p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <Badge variant="outline" className="bg-accent/10 text-accent border-accent/20">
                <Zap className="h-3 w-3 mr-1" />
                Active
              </Badge>
              <Button variant="outline" size="sm">
                <Settings className="h-4 w-4 mr-2" />
                Configure
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="scenarios" className="w-full">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="scenarios">Optimization Scenarios</TabsTrigger>
              <TabsTrigger value="constraints">Constraints</TabsTrigger>
              <TabsTrigger value="metrics">Algorithm Metrics</TabsTrigger>
            </TabsList>

            <TabsContent value="scenarios" className="space-y-4">
              <div className="flex items-center justify-between">
                <h3 className="text-sm font-medium text-card-foreground">Active Scenarios</h3>
                <Button size="sm" onClick={createScenario} disabled={creating}>
                  <Play className="h-4 w-4 mr-2" />
                  {creating ? "Generating..." : "New Scenario"}
                </Button>
              </div>

              <ScrollArea className="h-80">
                <div className="space-y-4">
                  {scenarios.map((scenario) => (
                    <div key={scenario.id} className="bg-secondary/30 rounded-lg p-4 space-y-3">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          {scenario.status === "running" ? (
                            <div className="w-2 h-2 bg-primary rounded-full animate-pulse"></div>
                          ) : scenario.status === "completed" ? (
                            <CheckCircle className="h-4 w-4 text-accent" />
                          ) : (
                            <Clock className="h-4 w-4 text-muted-foreground" />
                          )}
                          <div>
                            <h4 className="font-medium text-secondary-foreground">{scenario.name}</h4>
                            <p className="text-xs text-muted-foreground">{scenario.description}</p>
                          </div>
                        </div>
                        <Badge
                          variant="outline"
                          className={
                            scenario.status === "running"
                              ? "bg-primary/10 text-primary border-primary/20"
                              : scenario.status === "completed"
                                ? "bg-accent/10 text-accent border-accent/20"
                                : "bg-muted/10 text-muted-foreground border-muted/20"
                          }
                        >
                          {scenario.status}
                        </Badge>
                      </div>

                      <div className="space-y-2">
                        <div className="flex items-center justify-between text-sm">
                          <span className="text-muted-foreground">Progress</span>
                          <span className="text-secondary-foreground">{scenario.estimatedCompletion}</span>
                        </div>
                        <Progress value={scenario.progress} className="h-2" />
                      </div>

                      <div className="grid grid-cols-3 gap-3 text-xs">
                        <div className="text-center">
                          <div className="text-accent font-medium">{scenario.improvements.throughput}</div>
                          <div className="text-muted-foreground">Throughput</div>
                        </div>
                        <div className="text-center">
                          <div className="text-accent font-medium">{scenario.improvements.delays}</div>
                          <div className="text-muted-foreground">Delays</div>
                        </div>
                        <div className="text-center">
                          <div className="text-accent font-medium">{scenario.improvements.utilization}</div>
                          <div className="text-muted-foreground">Utilization</div>
                        </div>
                      </div>

                      <div className="flex items-center justify-between">
                        <div className="flex gap-2">
                          {scenario.status === "running" && (
                            <Button size="sm" variant="outline" className="h-7 text-xs bg-transparent">
                              <Pause className="h-3 w-3 mr-1" />
                              Pause
                            </Button>
                          )}
                          <Button size="sm" variant="outline" className="h-7 text-xs bg-transparent">
                            Details
                          </Button>
                        </div>
                        {scenario.status === "completed" && (
                          <Button size="sm" className="h-7 text-xs">
                            Apply Results
                          </Button>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </ScrollArea>
            </TabsContent>

            <TabsContent value="constraints" className="space-y-4">
              <div className="flex items-center justify-between">
                <h3 className="text-sm font-medium text-card-foreground">System Constraints</h3>
                <Button size="sm" variant="outline">
                  <Settings className="h-4 w-4 mr-2" />
                  Manage
                </Button>
              </div>

              <div className="grid grid-cols-1 gap-3">
                {constraints.map((constraint, index) => (
                  <div key={index} className="bg-secondary/30 rounded-lg p-3 flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      {constraint.status === "active" ? (
                        <CheckCircle className="h-4 w-4 text-accent" />
                      ) : (
                        <AlertTriangle className="h-4 w-4 text-chart-3" />
                      )}
                      <span className="text-sm font-medium text-secondary-foreground">{constraint.name}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge
                        variant="outline"
                        className={
                          constraint.priority === "critical"
                            ? "bg-destructive/10 text-destructive border-destructive/20"
                            : constraint.priority === "high"
                              ? "bg-chart-3/10 text-chart-3 border-chart-3/20"
                              : constraint.priority === "medium"
                                ? "bg-primary/10 text-primary border-primary/20"
                                : "bg-muted/10 text-muted-foreground border-muted/20"
                        }
                      >
                        {constraint.priority}
                      </Badge>
                      <Badge
                        variant="outline"
                        className={
                          constraint.status === "active"
                            ? "bg-accent/10 text-accent border-accent/20"
                            : "bg-chart-3/10 text-chart-3 border-chart-3/20"
                        }
                      >
                        {constraint.status}
                      </Badge>
                    </div>
                  </div>
                ))}
              </div>
            </TabsContent>

            <TabsContent value="metrics" className="space-y-4">
              <div className="flex items-center justify-between">
                <h3 className="text-sm font-medium text-card-foreground">Algorithm Performance</h3>
                <Button size="sm" variant="outline">
                  <Target className="h-4 w-4 mr-2" />
                  Benchmark
                </Button>
              </div>

              <div className="grid grid-cols-2 gap-4">
                {algorithmMetrics.map((metric, index) => (
                  <div key={index} className="bg-secondary/30 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium text-secondary-foreground">{metric.name}</span>
                      <Badge
                        variant="outline"
                        className={
                          metric.status === "perfect" || metric.status === "excellent"
                            ? "bg-accent/10 text-accent border-accent/20"
                            : metric.status === "optimal" || metric.status === "good"
                              ? "bg-primary/10 text-primary border-primary/20"
                              : "bg-chart-3/10 text-chart-3 border-chart-3/20"
                        }
                      >
                        {metric.status}
                      </Badge>
                    </div>
                    <div className="text-2xl font-bold text-secondary-foreground">{metric.value}</div>
                  </div>
                ))}
              </div>

              <div className="bg-secondary/30 rounded-lg p-4">
                <h4 className="text-sm font-medium text-secondary-foreground mb-3">Optimization History</h4>
                <div className="space-y-2 text-xs">
                  <div className="flex items-center justify-between">
                    <span className="text-muted-foreground">Last 24 hours</span>
                    <span className="text-accent">47 optimizations completed</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-muted-foreground">Average improvement</span>
                    <span className="text-accent">+12% efficiency</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-muted-foreground">Success rate</span>
                    <span className="text-accent">94%</span>
                  </div>
                </div>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  )
}
